@page "/"
@using DataModels.ApplicationModels
@using EMPP_Server.Data
@using EMPP_Server.Infrastructure.Repositories.IRepo
@using Microsoft.AspNetCore.Identity

@inject NavigationManager _nav
@inject AuthenticationStateProvider _auth
@inject UserManager<ApplicationUser> _userManager
@inject IInitialStage _initial
@inject IJSRuntime _Js

<PageTitle>Home</PageTitle>


<AuthorizeView>
    <Authorized>
        <MudCard Elevation="4" Class="p-3">
            <MudCardHeader>
                <MudAvatar Color="Color.Primary">
                    <MudIcon Icon="@MudBlazor.Icons.Material.Filled.Home" />
                </MudAvatar>
                <MudDivider DividerType="DividerType.Middle" />
                <MudText Typo="Typo.h4">Welcome to the EMPP Helper</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.body1">The EMPP (The Economic Mobility Pathways Pilot) is a pilot program that helps skilled refugees and other displaced people immigrate to Canada. The program is designed to help you find a job in Canada that matches your skills and experience.</MudText>
            </MudCardContent>

            <MudCardActions>
                <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick="StartApplication">Start Application</MudButton>
            </MudCardActions>
        </MudCard>
        <MudDivider DividerType="DividerType.Middle" Class="my-2" />
        <MudPaper Elevation="4" Class="p-3">
            @*Three main elements in the screen (Applications Portal, Communications, Profile)*@
            <MudGrid Justify="Justify.SpaceBetween">
                <MudItem>
                    <MudText Typo="Typo.h5">Applications Portal</MudText>
                </MudItem>
                @*Applications Portal*@
                <MudItem>
                    <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick='() => _nav.NavigateTo("/UserPortal")'>View</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
        <MudDivider DividerType="DividerType.Middle" Class="my-2" />
        <MudPaper Elevation="4" Class="p-3">
            <MudGrid Justify="Justify.SpaceBetween">
                <MudItem>
                    <MudText Typo="Typo.h5">Communications</MudText>
                </MudItem>
                @*Communications*@
                <MudItem>
                    <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick='() => _nav.NavigateTo("/Communications")'>View</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
        <MudDivider DividerType="DividerType.Middle" Class="my-2" />
        <MudPaper Elevation="4" Class="p-3">
            <MudGrid Justify="Justify.SpaceBetween">
                <MudItem>
                    <MudText Typo="Typo.h5">Profile</MudText>
                </MudItem>
                @*Profile*@
                <MudItem>
                    <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick='() => _nav.NavigateTo("/Profile")'>View</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>

    </Authorized>
    <NotAuthorized>
        @*if you have an account login to your account or register*@
        <p>
            <NavLink class="link-primary" href="account/login">Log in</NavLink> to access your account.
        </p>
        <p>
            <NavLink class="link-danger" href="account/register">Register</NavLink> if you don't have an account.
        </p>
    </NotAuthorized>
</AuthorizeView>

@code {


    private void RegisterNow()
    {
        _nav.NavigateTo("/Account/Register");
    }

    private void StartApplication()
    {
        _nav.NavigateTo("/startApplication");
    }

    public string UserId { get; set; }
    public string UserEmailAddress { get; set; }

    private async Task GetUserId()
    {
        var authState = await _auth.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user != null)
        {
            UserEmailAddress = user.Identity.Name;
            if (UserEmailAddress != null)
            {
                var userObj = await _userManager.FindByEmailAsync(UserEmailAddress);
                if (userObj != null)
                {
                    UserId = userObj.Id;
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUserId();
    }
}