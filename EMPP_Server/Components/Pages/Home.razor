@page "/"
@using DataModels.ApplicationModels
@using EMPP_Server.Data
@using EMPP_Server.Infrastructure.Repositories.IRepo
@using Microsoft.AspNetCore.Identity

@inject NavigationManager _nav
@inject AuthenticationStateProvider _auth
@inject UserManager<ApplicationUser> _userManager
@inject IInitialStage _initial
@inject IJSRuntime _Js

<PageTitle>Home</PageTitle>


<AuthorizeView>
    <Authorized>
        <h1>Hello, @context.User.Identity?.Name!</h1>
        <p>Here are your current applications:</p>
        @if (Applications.Any())
        {
            <table class="table table-active">
                <thead>
                    <tr>
                        <th>Application Number</th>
                        <th>Application Type</th>
                        <th>Application Status</th>
                        <th>Application Date</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var application in Applications)
                    {

                        <tr>
                            <td>@application.ApplicationNumber</td>
                            <td></td>
                            <td>In Process</td>
                            <td>@application.CreatedDate</td>
                            <td>
                                <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => ResumeApplication(UserId,application.Id)" />
                                <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteApplication(application.Id)" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>You have no applications.</p>
        }

        <p>Click the button below to start a new application.</p>
        <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick="StartApplication">Start Application</MudButton>
        <p>Or click the button below to register.</p>
        <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Secondary" OnClick="RegisterNow">Register</MudButton>
    </Authorized>
    <NotAuthorized>
        @*if you have an account login to your account or register*@
        <p>
            <NavLink class="link-primary" href="account/login">Log in</NavLink> to access your account.
        </p>
        <p>
            <NavLink class="link-danger" href="account/register">Register</NavLink> if you don't have an account.
        </p>
    </NotAuthorized>
</AuthorizeView>

@code {

    public InitialStageDTO Application { get; set; } = new InitialStageDTO();

    public IEnumerable<InitialStageDTO> Applications { get; set; } = new List<InitialStageDTO>();

    private async Task LoadApplications()
    {
        var allApps = await _initial.GetAllApplicationsByUserId(UserId);
        // Check if applications is not IsDeleted
        Applications = allApps.Where(x => x.IsDeleted == false).ToList();
    }

    private void RegisterNow()
    {
        _nav.NavigateTo("/Account/Register");
    }

    private void StartApplication()
    {
        _nav.NavigateTo("/Intake");
    }

    public string UserId { get; set; }
    public string UserEmailAddress { get; set; }

    private async Task GetUserId()
    {
        var authState = await _auth.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user != null)
        {
            UserEmailAddress = user.Identity.Name;
            if (UserEmailAddress != null)
            {
                var userObj = await _userManager.FindByEmailAsync(UserEmailAddress);
                if (userObj != null)
                {
                    UserId = userObj.Id;
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUserId();
        await LoadApplications();
    }

    private async Task DeleteApplication(int id)
    {
        var confirm = await _Js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this application?");
        if (confirm)
        {
            await _initial.DeleteApplication(id);
            await LoadApplications();
        }
    }

    private void ResumeApplication(string userId, int id)
    {
        _nav.NavigateTo($"/Intake/{userId}&{id}");
    }
}