@page "/myPortal"
@page "/myPortal/{AppId:int}"


@using DataModels.ApplicationModels
@using EMPP_Server.Data
@using EMPP_Server.Infrastructure.Repositories.IMainInfoRepo
@using EMPP_Server.Infrastructure.Repositories.IRepo
@using EMPP_Server.Infrastructure.Repositories.WorkHistoryRepo
@using Microsoft.AspNetCore.Identity

@inject IInitialStage _initial
@inject IMainInfoRepo _main
@inject IWorkHistoryRepo _work
@inject ILanguageData _languageData
@inject ILanguageTestRepo _languageTest
@inject NavigationManager _nav
@inject ISnackbar _snackbar
@inject IJSRuntime _js
@inject UserManager<ApplicationUser> _userManager
@inject AuthenticationStateProvider _auth


<PageTitle>User Portal</PageTitle>

@if (IsLoading)
{
    <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" class="rz-m-12" Gap="2rem">
        <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
            <Template>Wait</Template>
        </RadzenProgressBarCircular>
    </RadzenStack>
}
else
{
    <MudContainer>
        <MudText Typo="Typo.h4">Welcome to the User Portal</MudText>
        <MudText Typo="Typo.body1">This is your personal portal where you can view your application information.</MudText>
        <MudText Typo="Typo.body1">@CurrentUser.Id</MudText>
    </MudContainer>
    <MudPaper Elevation="4" Class="p-3">
        <MudGrid Justify="Justify.SpaceBetween">
            <MudItem>
                <MudText Typo="Typo.h5">User Portal</MudText>
            </MudItem>
            <MudItem>
                <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Error" OnClick='() => _nav.NavigateTo("/")'>Cancel</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <MudGrid>
        <MudItem lg="12">
            <MudPaper Elevation="4" Class="p-3">
                <MudText Typo="Typo.h6">Main Information</MudText>
                <MudDivider />
                <MudText Typo="Typo.body1">Name: @($"{Main.FirstName} {Main.MiddleName} {Main.LastName}")</MudText>
                <MudText Typo="Typo.body1">Email: @Main.Email</MudText>
                <MudText Typo="Typo.body1">Phone: @Main.Phone</MudText>
                <MudText Typo="Typo.body1">Address: @Main.AddressLine1</MudText>
                <MudText Typo="Typo.body1">City: @Main.City</MudText>
                <MudText Typo="Typo.body1">State: @Main.State</MudText>
                <MudText Typo="Typo.body1">Zip: @Main.PostalCode</MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
    <MudDivider DividerType="DividerType.Middle" Class="my-2" />
    <MudGrid>
        <MudItem lg="12">
            <MudPaper Elevation="4" Class="p-3">
                <MudGrid Justify="Justify.SpaceBetween">
                    <MudItem>
                        <MudText Typo="Typo.h6">Work History</MudText>
                    </MudItem>
                    <MudItem>
                        <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick='() => _nav.NavigateTo($"/workhistory/edit/{AppId}")'>Add Experience</MudButton>
                    </MudItem>
                </MudGrid>
                <MudDivider />
                @foreach (var work in WorkHistories)
                {
                    <MudCard Elevation="4" Class="m-2">

                        <MudCardContent>
                            <MudText Typo="Typo.h6">@work.CompanyName</MudText>
                            <MudText Typo="Typo.body1">@work.Position</MudText>
                            <MudText Typo="Typo.body1">@work.StartDate.Value.ToString("d") - @work.EndDate.Value.ToString("d")</MudText>
                            <MudText Typo="Typo.body1">@work.JobDescription</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Color="Color.Primary" OnClick='() => _nav.NavigateTo($"/workhistory/edit/{AppId}")'>Edit</MudButton>
                            <MudButton Color="Color.Secondary" >Delete</MudButton>
                        </MudCardActions>
                        </MudCard>
                    <MudDivider />
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <MudGrid>
        <MudItem lg="12">
            <MudPaper Elevation="4" Class="p-3">
                <MudText Typo="Typo.h6">Language Data</MudText>
                <MudDivider />
                <MudText Typo="Typo.body1">Language: @LanguageData.ApplicantLanguage</MudText>
                <MudText Typo="Typo.body1">Proficiency: @LanguageData.SecondLanguage</MudText>
                <MudDivider />
                @foreach (var test in LanguageTests)
                {
                    <MudText Typo="Typo.body1">Test Date: @test.TestDate</MudText>
                    <MudText Typo="Typo.body1">Test Score: @test.TestScore</MudText>
                    <MudText Typo="Typo.body1">Test Type: @test.TestType</MudText>
                    <MudDivider />
                }
            </MudPaper>
        </MudItem>
    </MudGrid>

}

@code {
    [Parameter]
    public int AppId { get; set; }

    public string searchString1 { get; set; }

    public InitialStageDTO InitialStage { get; set; } = new InitialStageDTO();

    public MainInfoDTO Main { get; set; } = new MainInfoDTO();

    public IEnumerable<WorkHistoryDTO> WorkHistories { get; set; } = new List<WorkHistoryDTO>();
    public IEnumerable<SkillDTO> Skills { get; set; } = new List<SkillDTO>();
    public IEnumerable<WorkAchievementDTO> WorkAchievements { get; set; } = new List<WorkAchievementDTO>();

    public LanguageDataDTO LanguageData { get; set; } = new LanguageDataDTO();
    public IEnumerable<LanguageTestDTO> LanguageTests { get; set; } = new List<LanguageTestDTO>();



    public bool IsLoading { get; set; } = false;




    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await GetCurrentUser();
        await LoadApplication();
        await LoadWorkHistory();
        await LoadLanguageData();
        IsLoading = false;
    }

    public async Task LoadApplication()
    {
        InitialStage = await _initial.GetApplicationById(AppId);
        Main = await _main.GetMainInfoByAppId(InitialStage.Id);
    }

    public async Task LoadWorkHistory()
    {
        WorkHistories = await _work.GetWorkHistoriesByAppIdAsync(AppId);
    }

    public async Task LoadLanguageData()
    {
        LanguageData = await _languageData.GetLanguageByAppIdAsync(AppId);
        LanguageTests = await _languageTest.GetLanguageTestsByAppIdAsync(AppId);
    }

    // Get the current user
    public ApplicationUser CurrentUser { get; set; } = new ApplicationUser();

    private async Task GetCurrentUser()
    {
        var authState = await _auth.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user != null)
        {
            var userObj = await _userManager.FindByEmailAsync(user.Identity.Name);
            if (userObj != null)
            {
                CurrentUser = userObj;
            }
        }
    }

}
