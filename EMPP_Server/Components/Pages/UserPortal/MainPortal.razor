@page "/userPortal"
@using DataModels.ApplicationModels
@using EMPP_Server.Data
@using EMPP_Server.Infrastructure.Repositories.IRepo
@using Microsoft.AspNetCore.Identity

@inject IInitialStage _initial
@inject NavigationManager _nav
@inject AuthenticationStateProvider _auth
@inject UserManager<ApplicationUser> _userManager
@inject IJSRuntime _Js

<PageTitle>Applications Portal</PageTitle>

@if (IsLoading)
{
    <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" class="rz-m-12" Gap="2rem">
        <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
            <Template>Wait</Template>
        </RadzenProgressBarCircular>
    </RadzenStack>
}
else
{
    <MudPaper Elevation="4" Class="p-3">
        <MudGrid Justify="Justify.SpaceBetween">
            <MudItem>
                <MudText Typo="Typo.h5">Applications Portal</MudText>
            </MudItem>
            @*Start A New Application*@
            <MudItem>
                <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick='() => _nav.NavigateTo("/startApplication")'>New App</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <MudPaper>
        @if (Applications.Any())
        {
            <MudTable Items="Applications" Dense="true" Hover="true" Bordered="true" Striped="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Applications</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Application Number</MudTh>
                    <MudTh>Application Type</MudTh>
                    <MudTh>Application Status</MudTh>
                    <MudTh>Application Date</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        @(1000000000 + context.Id)
                    </MudTd>
                    <MudTd>@context.ApplicationType</MudTd>
                    <MudTd>In Process</MudTd>
                    <MudTd>@context.CreatedDate.ToString("d")</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.ViewList" Color="Color.Success" OnClick='() => _nav.NavigateTo($"/myPortal/{context.Id}")' />
                        <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => ResumeApplication(CurrentUser.Id,context.Id)" />
                        <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteApplication(context.Id)" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudText Typo="Typo.body1">You have no applications.</MudText>
        }
    </MudPaper>
}




@code {
    private ApplicationUser CurrentUser = new ApplicationUser();
    private IEnumerable<InitialStageDTO> Applications = new List<InitialStageDTO>();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUser();
    }

    private async Task GetCurrentUser()
    {
        var authState = await _auth.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user != null)
        {
            var userObj = await _userManager.FindByEmailAsync(user.Identity.Name);
            if (userObj != null)
            {
                CurrentUser = userObj;
                var apps = await _initial.GetAllApplicationsByUserId(CurrentUser.Id);
                Applications = apps.Where(x => x.IsDeleted == false);
                IsLoading = false;
            }
        }
    }

    private void StartApplication()
    {
        _nav.NavigateTo("/startApplication");
    }

    private void ResumeApplication(string UserId, int ApplicationId)
    {
        _nav.NavigateTo($"/myPortal/{ApplicationId}");
    }

    private async void DeleteApplication(int ApplicationId)
    {
        var confirm = await _Js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this application?");
        if (confirm)
        {
            await _initial.DeleteApplication(ApplicationId);
            Applications = await _initial.GetAllApplicationsByUserId(CurrentUser.Id);
        }
    }
}
