@page "/workhistory/edit/{id:int}"
@using DataModels.ApplicationModels
@using EMPP_Server.Components.Pages.Comp
@using EMPP_Server.Infrastructure.Repositories.IMainInfoRepo
@using EMPP_Server.Infrastructure.Repositories.IRepo
@using EMPP_Server.Infrastructure.Repositories.WorkHistoryRepo

@inject IWorkHistoryRepo _work
@inject ISkillRepo _skill
@inject IInitialStage _main
@inject IWorkAchievement _workAchievement
@inject IJSRuntime _js
@inject NavigationManager _nav
@inject ISnackbar _snackbar
@inject IDialogService DialogService

<PageTitle>Work History</PageTitle>

<MudItem>
    <MudTimeline Reverse="true" TimelinePosition="TimelinePosition.Bottom" TimelineOrientation="TimelineOrientation.Horizontal">
        <MudTimelineItem>
            <MudText Align="Align.Center">Intake</MudText>
        </MudTimelineItem>
        <MudTimelineItem>
            <MudText Align="Align.Center">Main Information</MudText>
        </MudTimelineItem>
        <MudTimelineItem DotStyle="background-color: #ff0000">
            <MudText Align="Align.Center">Work History</MudText>
        </MudTimelineItem>
        <MudTimelineItem>
            <MudText Align="Align.Center">Education</MudText>
        </MudTimelineItem>
    </MudTimeline>
</MudItem>


@if (IsLoading)
{
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <MudAlert IsOpen="@IsLoading" Severity="Severity.Info">Loading...</MudAlert>
            </div>
        </div>
    </div>
}
else
{
    <main class="container">
        <div class="row">
            <div class="col-md-12">
                <MudPaper Elevation="4" Class="p-3">
                    <MudGrid Justify="Justify.SpaceBetween">
                        <MudItem>
                            <MudText Typo="Typo.h5">Applicant: @($"{Application.FirstName} {Application.LastName}")</MudText>
                        </MudItem>
                        <MudItem>
                            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick="AddWork">Add Work</MudButton>
                        </MudItem>
                    </MudGrid>

                </MudPaper>
                @foreach (var item in WorkHistories)
                {
                    <MudDivider DividerType="DividerType.FullWidth" Class="m-2" />
                    <MudCard Elevation="4" Class="p-3">
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Color="Color.Secondary">I</MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Position: @item.Position</MudText>
                                <MudText Typo="Typo.caption">Company: @item.CompanyName</MudText> | <MudText Typo="Typo.caption">From: @item.StartDate.Value.ToString("d") To: @item.EndDate.Value.ToString("d")</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.RemoveCircleOutline" OnClick="() => DeleteWorkHistory(item.Id)" Color="Color.Default" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid Justify="Justify.SpaceBetween">
                                <MudItem>
                                    <MudText Class="text-decoration-underline" Typo="Typo.body1">Key Achievements</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" OnClick="() => AddAchievement(item.Id)" Color="Color.Default" />
                                </MudItem>
                            </MudGrid>
                            @foreach (var achievement in item.WorkAchievements)
                            {
                                <MudGrid>
                                    <MudItem>
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => EditAchievement(item.Id, achievement.Id)" Color="Color.Default" />
                                    </MudItem>
                                    <MudItem>
                                        <MudText Typo="Typo.body2">@achievement.AchievementName</MudText>
                                        <MudText Typo="Typo.caption">@achievement.AchievementDescription</MudText>
                                    </MudItem>
                                </MudGrid>
                            }
                        </MudCardContent>
                        <MudCardContent>
                            <MudGrid Justify="Justify.SpaceBetween">
                                <MudItem>
                                    <MudText Class="text-decoration-underline" Typo="Typo.body1">Skills</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" OnClick="() => AddSkill(item.Id)" Color="Color.Default" />
                                </MudItem>
                            </MudGrid>
                            @foreach (var skill in item.Skills)
                            {
                                //switch color based on skill level
                                var color = skill.SkillLevel switch
                                {
                                    "Beginner" => MudBlazor.Color.Error,
                                    "Intermediate" => MudBlazor.Color.Warning,
                                    "Advanced" => MudBlazor.Color.Success,
                                    _ => MudBlazor.Color.Primary
                                };


                                <MudChip T="string" Color="color" OnClick="() => EditSkill(item.Id,skill.Id)">@skill.SkillName</MudChip>
                            }
                        </MudCardContent>
                        <MudCardActions>

                        </MudCardActions>

                    </MudCard>
                    <MudDivider DividerType="DividerType.FullWidth" Class="m-2" />
                    <MudPaper Elevation="4" Class="p-3 mt-3">
                        <MudGrid Justify="Justify.FlexEnd">
                            <MudItem>
                                <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick='() => _nav.NavigateTo($"/language-data/{Id}" )'>Next</MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                }

            </div>
        </div>
    </main>

}



@code {
    [Parameter] public int Id { get; set; }

    public bool IsLoading { get; set; } = false;

    public string searchString1 { get; set; }

    public WorkHistoryDTO WorkHistory { get; set; } = new WorkHistoryDTO();

    public IEnumerable<WorkHistoryDTO> WorkHistories = new List<WorkHistoryDTO>();
    public IEnumerable<SkillDTO> Skills = new List<SkillDTO>();
    public IEnumerable<WorkAchievementDTO> WorkAchievements = new List<WorkAchievementDTO>();

    public InitialStageDTO Application { get; set; } = new InitialStageDTO();

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await LoadApplication();
        await LoadWorkHistory();
        IsLoading = false;
    }

    private async Task LoadApplication()
    {
        Application = await _main.GetApplicationById(Id);
    }

    private async Task LoadWorkHistory()
    {
        WorkHistories = await _work.GetWorkHistoriesByAppIdAsync(Id);
        Skills = await _skill.GetAll();
        WorkAchievements = await _workAchievement.GetAllAsync();
    }

    private async Task DeleteWorkHistory(int id)
    {
        var confirm = await _js.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirm)
        {
            await _work.DeleteWorkHistoryAsync(id);
            await LoadWorkHistory();
        }
    }

    // open dialog
    private async Task AddWork()
    {
        var parameters = new DialogParameters<AddWork>
        {
            { x => x.AppId, Id},
            { x => x.Color, Color.Error }
        };

        var options = new MudBlazor.DialogOptions() { CloseOnEscapeKey = true, CloseButton = true, FullWidth = true };

        var dialog = await DialogService.ShowAsync<AddWork>("Add Work", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadWorkHistory();
            _snackbar.Add("Work History Added", Severity.Success);
        }

    }

    // Add Skill
    private async Task AddSkill(int id)
    {
        var parameters = new DialogParameters<AddSkill>
        {
            { x => x.WorkId, id},
            { x => x.Color, Color.Error },
            { x => x.IsNew, true }
        };

        var options = new MudBlazor.DialogOptions() { CloseOnEscapeKey = true, CloseButton = true, FullWidth = true };

        var dialog = await DialogService.ShowAsync<AddSkill>("Add Skill", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadWorkHistory();
            _snackbar.Add("Skill Added", Severity.Success);
        }

    }

    // Edit Skill
    private async Task EditSkill(int id, int skillId)
    {
        var parameters = new DialogParameters<AddSkill>
        {
            { x => x.WorkId, id},
            { x => x.Color, Color.Error },
            { x => x.IsNew, false },
            { x => x.SkillId, skillId}
        };

        var options = new MudBlazor.DialogOptions() { CloseOnEscapeKey = true, CloseButton = true, FullWidth = true };

        var dialog = await DialogService.ShowAsync<AddSkill>("Edit Skill", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadWorkHistory();
            _snackbar.Add("Skill Edited", Severity.Success);
        }

    }

    // Add Achievement
    private async Task AddAchievement(int id)
    {
        var parameters = new DialogParameters<AddWorkAchievement>
        {
            { x => x.WorkId, id},
            { x => x.Color, Color.Error },
            { x => x.IsNew, true }
        };

        var options = new MudBlazor.DialogOptions() { CloseOnEscapeKey = true, CloseButton = true, FullWidth = true };

        var dialog = await DialogService.ShowAsync<AddWorkAchievement>("Add Achievement", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadWorkHistory();
            _snackbar.Add("Achievement Added", Severity.Success);
        }

    }

    // Edit Achievement
    private async Task EditAchievement(int id, int achievementId)
    {
        var parameters = new DialogParameters<AddWorkAchievement>
        {
            { x => x.WorkId, id},
            { x => x.Color, Color.Error },
            { x => x.IsNew, false },
            { x => x.WorkAcievementID, achievementId}
        };

        var options = new MudBlazor.DialogOptions() { CloseOnEscapeKey = true, CloseButton = true, FullWidth = true };

        var dialog = await DialogService.ShowAsync<AddWorkAchievement>("Edit Achievement", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadWorkHistory();
            _snackbar.Add("Achievement Edited", Severity.Success);
        }

    }
}
